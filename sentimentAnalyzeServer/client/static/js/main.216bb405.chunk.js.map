{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","resObject","Object","entries","this","props","emotions","className","map","value","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","output","data","console","log","label","style","color","fontSize","score","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.216bb405.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n  render() {\n    let resObject = Object.entries(this.props.emotions);\n    return (\n      <div>\n        {/*You can remove this line and the line below. */}\n        {/* {JSON.stringify(this.props.emotions)} */}\n        <table className=\"table table-bordered\">\n          <tbody>\n            {\n              resObject.map((value) =>\n                <tr>\n                  <td>{value[0]}</td>\n                  <td>{value[1]}</td>\n                </tr>\n              )\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\n// const instance = axios.create({ baseURL: 'http://localhost:8080' })\n\nclass App extends React.Component {\n  state = {\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n    mode: \"text\",\n    sentimentOutput: [],\n    sentiment: true\n  }\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"url\") {\n      this.setState({\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  renderTextBox = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"text\") {\n      this.setState({\n        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n        mode: \"url\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n    let ret = \"\";\n    let url = \"\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response) => {\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n\n      //this.setState({sentimentOutput:response.data});\n      let output = response.data;\n      console.log(\"Response \", response.data)\n      if (response.data.label === \"positive\") {\n        output = <div style={{ color: \"green\", fontSize: 20 }}>{response.data.score}</div>\n      } else if (response.data.label === \"negative\") {\n        output = <div style={{ color: \"red\", fontSize: 20 }}>{response.data.score}</div>\n      } else if (response.data.label === \"neutral\") {\n        output = <div style={{ color: \"yellow\", fontSize: 20 }}>{response.data.score}</div>\n      } else {\n        output = <div style={{ color: \"orange\", fontSize: 20 }}>{response.data.score}</div>\n      }\n      this.setState({ sentimentOutput: output });\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n    let ret = \"\";\n    let url = \"\";\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response) => {\n      this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n        <br /><br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}